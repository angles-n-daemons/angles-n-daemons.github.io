<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software on Home</title><link>https://abudlightlime.com/categories/software/</link><description>Recent content in software on Home</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 26 Nov 2021 19:02:13 -0400</lastBuildDate><atom:link href="https://abudlightlime.com/categories/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Diagnosing MySQL deadlocks</title><link>https://abudlightlime.com/post/20211126-diagnosing-mysql-deadlocks/</link><pubDate>Fri, 26 Nov 2021 19:02:13 -0400</pubDate><guid>https://abudlightlime.com/post/20211126-diagnosing-mysql-deadlocks/</guid><description>An unpleasant exception Deadlock found when trying to get lock; try restarting transaction If you&amp;rsquo;re reading this document, you&amp;rsquo;re either here out of curiosity or necessity. I&amp;rsquo;ll be brief for those in the latter camp. When you encounter the above error in production, you only need the stack trace to figure out which query got blocked. What I have found is difficult to ascertain is which query is doing the actual blocking.</description></item><item><title>Kubernetes Web Deployments, a love story</title><link>https://abudlightlime.com/post/20211028-k8s-web-deployments/</link><pubDate>Thu, 28 Oct 2021 21:37:13 -0400</pubDate><guid>https://abudlightlime.com/post/20211028-k8s-web-deployments/</guid><description>The wrong tool for the job? Kubernetes is quickly becoming the default mechanism for engineers to manage remote deployments. Its feature-richness and ease of use make it an attractive solution for pushing work into the cloud. However, there still exist some quirks of its usage that any web developer should know before using it. This story tells of one of them.
What happens on Deployment For anyone who knows kubernetes, you&amp;rsquo;ll know that service deployments are rolled out in sets of pods.</description></item><item><title>Your first rotation oncall as a Software Engineer</title><link>https://abudlightlime.com/post/20211224-your-first-oncall-rotation/</link><pubDate>Thu, 28 Oct 2021 21:37:13 -0400</pubDate><guid>https://abudlightlime.com/post/20211224-your-first-oncall-rotation/</guid><description>I think most engineers remember this first time oncall. If you&amp;rsquo;re writing software at any larger organization, oncall is a way for the company to delegate critical issues and shield teams from unexpected interruptions. I found this helpful guide](https://brianjenney.medium.com/how-to-survive-your-first-on-call-rotation-as-a-software-engineer-5bc0d334566e) detailing a lot of the ideas I share, and hope that this document can serve as an affirmation and compliment to that one.
What to do I want to highlight the most important idea about oncall that I feel not everyone knows.</description></item></channel></rss>