<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>datadog on Home</title><link>https://abudlightlime.com/tags/datadog/</link><description>Recent content in datadog on Home</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 28 Oct 2021 21:37:13 -0400</lastBuildDate><atom:link href="https://abudlightlime.com/tags/datadog/index.xml" rel="self" type="application/rss+xml"/><item><title>Your first rotation oncall as a Software Engineer</title><link>https://abudlightlime.com/post/20211224-your-first-oncall-rotation/</link><pubDate>Thu, 28 Oct 2021 21:37:13 -0400</pubDate><guid>https://abudlightlime.com/post/20211224-your-first-oncall-rotation/</guid><description>I think most engineers remember this first time oncall. If you&amp;rsquo;re writing software at any larger organization, oncall is a way for the company to delegate critical issues and shield teams from unexpected interruptions. I found this helpful guide](https://brianjenney.medium.com/how-to-survive-your-first-on-call-rotation-as-a-software-engineer-5bc0d334566e) detailing a lot of the ideas I share, and hope that this document can serve as an affirmation and compliment to that one.
What to do I want to highlight the most important idea about oncall that I feel not everyone knows.</description></item></channel></rss>