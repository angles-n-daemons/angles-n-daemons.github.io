<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sql on Home</title><link>https://abudlightlime.com/tags/sql/</link><description>Recent content in Sql on Home</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 11 Aug 2023 10:26:00 -0400</lastBuildDate><atom:link href="https://abudlightlime.com/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>popSQL part 2: writing the sqlite database file</title><link>https://abudlightlime.com/posts/20230811-popsql-2-writing-database-files/</link><pubDate>Fri, 11 Aug 2023 10:26:00 -0400</pubDate><guid>https://abudlightlime.com/posts/20230811-popsql-2-writing-database-files/</guid><description>&lt;h1 id="writing-out-what-we-read">Writing out what we read&lt;/h1>
&lt;p>The next part of this exercise is going to be writing back out the database files we read in. Hopefully by the end of the exercise we should be able to run this new function in our main file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># main.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_file_end_to_end&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#75715e"># create the pagers for both the old and new dbs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> old_db_pager &lt;span style="color:#f92672">=&lt;/span> Pager(&lt;span style="color:#e6db74">&amp;#39;test.db&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> new_db_pager &lt;span style="color:#f92672">=&lt;/span> Pager(&lt;span style="color:#e6db74">&amp;#39;generated.db&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#75715e"># read in the schema page&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> schema_page &lt;span style="color:#f92672">=&lt;/span> old_db_pager&lt;span style="color:#f92672">.&lt;/span>get_page(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> dbinfo &lt;span style="color:#f92672">=&lt;/span> DBInfo(schema_page)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> schema_node &lt;span style="color:#f92672">=&lt;/span> Node(schema_page, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#75715e"># read in the page with the test table&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> data_page &lt;span style="color:#f92672">=&lt;/span> old_db_pager&lt;span style="color:#f92672">.&lt;/span>get_page(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> data_node &lt;span style="color:#f92672">=&lt;/span> Node(data_page)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#75715e"># serialize the pages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> new_schema_page &lt;span style="color:#f92672">=&lt;/span> dbinfo&lt;span style="color:#f92672">.&lt;/span>to_bytes() &lt;span style="color:#f92672">+&lt;/span> schema_node&lt;span style="color:#f92672">.&lt;/span>to_bytes(dbinfo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> new_data_page &lt;span style="color:#f92672">=&lt;/span> data_node&lt;span style="color:#f92672">.&lt;/span>to_bytes(dbinfo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#75715e"># write the pages to the new db&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> new_db_pager&lt;span style="color:#f92672">.&lt;/span>write_page(&lt;span style="color:#ae81ff">1&lt;/span>, new_schema_page)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> new_db_pager&lt;span style="color:#f92672">.&lt;/span>write_page(&lt;span style="color:#ae81ff">2&lt;/span>, new_data_page)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> print(&lt;span style="color:#e6db74">&amp;#39;generated.db written&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">-&lt;/span> test_schema_page()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> test_file_end_to_end()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this to work we need to introduce some new functions that allow us to serialize our database header and nodes:&lt;/p></description></item><item><title>popSQL part 1: reading the sqlite database file</title><link>https://abudlightlime.com/posts/20230805-popsql-1-reading-db-pages/</link><pubDate>Sat, 05 Aug 2023 10:26:00 -0400</pubDate><guid>https://abudlightlime.com/posts/20230805-popsql-1-reading-db-pages/</guid><description>&lt;h1 id="reading-the-database-files">Reading the database files&lt;/h1>
&lt;p>My approach this time will be to start from the absolute bottom of the system, the file format. I chose this as a starting place because it&amp;rsquo;s easy to test in addition to being well documented. From there I&amp;rsquo;ll design a close-enough-to the source set of abstractions which are unit tested fairly comprehsively.&lt;/p>
&lt;p>Before we write any code, let&amp;rsquo;s look at the directory for the code this section. You&amp;rsquo;ll notice a pager, node, cell, and a record in the backend - a util and dbfile in the src directory, a main file, and a test suite. At this point, we create any folders and &lt;code>__init__.py&lt;/code> files needed to support the structure. You&amp;rsquo;ll also notice a &lt;code>test.db&lt;/code> which we&amp;rsquo;ll create using sqlite itself, and ideally be parsing out using our own code by the end of this exercise.&lt;/p></description></item><item><title>popSQL part 0: a DB education through reverse-engineering</title><link>https://abudlightlime.com/posts/20230803-popsql-0-recreating-sqlite/</link><pubDate>Thu, 03 Aug 2023 11:41:42 -0400</pubDate><guid>https://abudlightlime.com/posts/20230803-popsql-0-recreating-sqlite/</guid><description>&lt;h1 id="a-liking-for-database-systems">A liking for database systems&lt;/h1>
&lt;p>Databases have long been a special interest of mine. Since taking CS 445 Information Systems at UMass, I&amp;rsquo;ve held a unique curiosity for how databases were used and how they worked under the hood. I found topics like relational algebra fascinating, and I always enjoyed how clean SQL felt. I distinctly remember how enjoyable it was leafing through Michael Stonebraker&amp;rsquo;s &lt;a href="https://redbook.io">Red Book&lt;/a> and over time I developed a decent understanding about how to design, interact with and debug production databases.&lt;/p></description></item></channel></rss>