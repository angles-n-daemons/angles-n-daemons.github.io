<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on Home</title><link>https://abudlightlime.com/tags/functional-programming/</link><description>Recent content in Functional Programming on Home</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 23 Dec 2021 23:17:32 -0400</lastBuildDate><atom:link href="https://abudlightlime.com/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Programming for laymen, a perhaps unexplored perspective</title><link>https://abudlightlime.com/drafts/20230914-functional-programming-for-laymen/</link><pubDate>Thu, 23 Dec 2021 23:17:32 -0400</pubDate><guid>https://abudlightlime.com/drafts/20230914-functional-programming-for-laymen/</guid><description>&lt;p>The core of my argument is that good functional programming requires more working memory on behalf of the operator than equivalent procedural programs. The introduction of state, which can be thought of as materializations of the events processed by the system works well with how most people model their worlds.&lt;/p>
&lt;h1 id="humans-operate-on-a-materialized-view">Humans operate on a materialized view&lt;/h1>
&lt;p>My wallet has a balance of 20 dollars. It isn&amp;rsquo;t a wallet with a 12.43 transaction at McDonald&amp;rsquo;s, a 15.99 charge from Netflix and a 24.00 venmo from my friend Ray, it&amp;rsquo;s got 20 dollars.&lt;/p></description></item></channel></rss>